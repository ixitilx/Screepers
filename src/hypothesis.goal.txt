What are script's game goals?

GOAL = Raise expansion rank     RESULT = Energy fed to controller
    STRATEGY = Feed energy to controllers
        Act as if given infrastructure is in place!

        Get suitable creep at required position
        Get energy from nearby container
        Fix container if needed
        Feed energy to controller

Every 'room' has a ... controller module responsible for some sort of operations in that room
Every 'controller' structure has a ... controller module responsible for handling operations around controller structure
Every 'source' has a ... controller module responsible for handling operations around that source

There is a number of services where you can request information, creeps and buildings

GOAL = Get suitable creep at required position      RESULT = suitable creep at required position
    GOAL = Get suitable creep


Raise Power Rank
    Feed power to powerbanks
        Collect power
        Transport power
        Feed power to powerspawn

--

ExpansionRank():
    RefillStructures() && BuildStructures() && UpgradeController();

PowerRank():
    ProcessPower();

--

RefillStructures():
    // structures which require energy and does not have enough energy incoming
    // prioritized somehow
    const sinks = GetEnergyShortageStructures(room); // instant
    const creeps = GetEnergyFilledCreeps(room); // may span
    routeEnergy(creeps, sinks);

    RouteEnergy(creeps, sinks):


    GetEnergyShortageStructures():
        _.filter(Game.structures, s => s.structureType in [spawn, extension, tower, lab])
         .filter(s => s.getEnergyBalance() < 0)

        GetEnergyBalance(structure):
            return structure.energy - structure.energyCapacity + structure.getIncomingEnergy()

            GetIncomingEnergy(structure):
                return sum(IncomingEnergy);

RefillStructure(structure):
    // objects which have energy which is not queued to be hauled
    // prioritized by distance
    const balance = structure.getEnergyBalance();
    let creeps = getDedicatedCreeps(structure);
    let toDeliver = balance;
    _.each(creeps, function(creep) {
        const toDeliver = creep.addDeliveryOrder(structure, balance);
        balance -= toDeliver;
    });


creep with a certain configuration serves multiple buildings
energyFlow

source  harvest:
            if (me.wouldoverflow)
                if (hascontainer)
                    if (cont.hp < 50%)
                        repair
                        repflag = true
                    if (!cont.full)
                        transfer
                        transferflag = true

            if (me.full && !repflag && !transferflag)
                err_full

            if (!repFlag)
                harvest

        haul:
            if (hascontainer)
                if (cont.damaged)
                    repair
                if (repairflag || !full && cont.hasenergy)
                    withdraw
            
            if (hasstorage)
                transfer(storage)

        fill:
            if (hasstorage)
                withdraw

        --(withdraw)-> filler   || carry --(transfer)-> eShortageStructure
        --(withdraw)-> builder  || work/carry --(build)-> site
                                              --(repair)-> wall/rampart
        --(withdraw)-> upgrader || work/carry --(upgrade)-> controller

if (hascontainer && container.hasroom)
    container 
else
    refill || build || upgrade

# How to break room into sections?
Calculate shortest paths from every natural wall to the every other one
Among those intersecting each other, remove all walls but the shortest one

# 